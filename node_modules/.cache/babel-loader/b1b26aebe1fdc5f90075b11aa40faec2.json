{"ast":null,"code":"var _jsxFileName = \"/Users/jaylowe/Projects/Orion/school_tools_frontend_fresh/src/components/AdminClient.js\";\nimport React from 'react';\nimport LoginMenu from './LoginMenu.js';\nimport AdminView from \"./AdminView.js\";\nimport CollectionForm from './CollectionForm.js'; // React libraries\n\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"; //// **** INITIALIZATIONS **** ////\n// sets up the uniqid hashing function for use with component id's\n\nvar uniqid = require('uniqid'); // TODO: add a link to the 'home' route from here so that\n// users land on / and can't leave in the form of a conditional\n// rendering function (call ParentView on success with StudentID passed in)\n// goal: parents start in login menu, upon success something allows them into the\n// parent view with the StudentID as a prop\n\n\nclass AdminClient extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      username: \"\",\n      password: \"\",\n      loginState: \"\",\n      admin: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      loginState: /*#__PURE__*/React.createElement(CollectionForm, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(LoginMenu, {\n        callbackButton: () => this.authCheck(),\n        callbackOnChangeUsername: event => this.updateUsernameState(event),\n        callbackOnChangePassword: event => this.updatePasswordState(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }\n      }))\n    });\n  } // updates the state on keystroke change\n\n\n  updateUsernameState(event) {\n    this.setState({\n      username: event.target.value\n    });\n  }\n\n  updatePasswordState(event) {\n    this.setState({\n      password: event.target.value\n    });\n  } // TODO: update the fetch to search for a parent username and password!\n\n\n  authCheck() {\n    fetch('/admin', {\n      method: 'POST',\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      }),\n      body: JSON.stringify({\n        username: this.state.username,\n        password: this.state.password\n      })\n    }).then(res => res.json()).then(admin => {\n      console.log(admin);\n\n      if (admin != false) {\n        this.setState({\n          admin\n        });\n      }\n    }).then(() => this.conditionalCheck());\n  } // performs auth check\n\n\n  conditionalCheck() {\n    if (this.state.admin != false) {\n      this.setState({\n        loginState: /*#__PURE__*/React.createElement(AdminView, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 41\n          }\n        })\n      });\n    } else {\n      alert(this.state.condition + \" is not a registered username!\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 25\n      }\n    }, this.state.loginState))));\n  }\n\n}\n\nexport default AdminClient;","map":{"version":3,"sources":["/Users/jaylowe/Projects/Orion/school_tools_frontend_fresh/src/components/AdminClient.js"],"names":["React","LoginMenu","AdminView","CollectionForm","BrowserRouter","Router","Switch","Route","Link","uniqid","require","AdminClient","Component","state","username","password","loginState","admin","componentDidMount","setState","authCheck","event","updateUsernameState","updatePasswordState","target","value","fetch","method","headers","Headers","body","JSON","stringify","then","res","json","console","log","conditionalCheck","alert","condition","render"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport LoginMenu from './LoginMenu.js';\nimport AdminView from \"./AdminView.js\";\n\nimport CollectionForm from './CollectionForm.js'\n\n// React libraries\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\n//// **** INITIALIZATIONS **** ////\n// sets up the uniqid hashing function for use with component id's\nvar uniqid = require('uniqid');\n\n\n// TODO: add a link to the 'home' route from here so that\n// users land on / and can't leave in the form of a conditional\n// rendering function (call ParentView on success with StudentID passed in)\n\n// goal: parents start in login menu, upon success something allows them into the\n// parent view with the StudentID as a prop\n\nclass AdminClient extends React.Component {\n    state = { username: \"\", password: \"\", loginState: \"\", admin: false }\n\n    componentDidMount() {\n        this.setState({\n            loginState:\n                <CollectionForm >\n                    <LoginMenu\n                        callbackButton={() => this.authCheck()}\n                        callbackOnChangeUsername={(event) => this.updateUsernameState(event)}\n                        callbackOnChangePassword={(event) => this.updatePasswordState(event)}\n                    />\n                </CollectionForm>\n        })\n    }\n\n    // updates the state on keystroke change\n    updateUsernameState(event) {\n        this.setState({ username: event.target.value })\n    }\n\n    updatePasswordState(event) {\n        this.setState({ password: event.target.value })\n    }\n\n    // TODO: update the fetch to search for a parent username and password!\n    authCheck() {\n        fetch('/admin', {\n            method: 'POST',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            body: JSON.stringify({ username: this.state.username, password: this.state.password })\n        })\n            .then(res => res.json())\n            .then(admin => {\n                console.log(admin)\n                if (admin != false) {\n                    this.setState({ admin })\n                }\n            })\n            .then(() => this.conditionalCheck())\n    }\n\n    // performs auth check\n    conditionalCheck() {\n        if (this.state.admin != false) {\n            this.setState({ loginState: <AdminView /> })\n        } else {\n            alert(this.state.condition + \" is not a registered username!\")\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Router>\n                    <Switch>\n                        <Route path=\"/\" >\n                            {this.state.loginState}\n                        </Route>\n                    </Switch>\n                </Router>\n            </div >\n        )\n    }\n}\n\nexport default AdminClient"]},"metadata":{},"sourceType":"module"}