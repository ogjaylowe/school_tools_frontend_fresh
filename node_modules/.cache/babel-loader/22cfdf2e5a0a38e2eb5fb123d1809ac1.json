{"ast":null,"code":"var _jsxFileName = \"/Users/jaylowe/Projects/Orion/school_tools_frontend_fresh/src/components/AdminHomeworkClubView.js\";\nimport React from \"react\";\nimport configValues from '../config.js';\nimport TableR from './TableR.js';\nimport CollectionForm from './CollectionForm.js';\nimport DescriptionText from './DescriptionText.js';\nimport Selector from './Selector.js';\nimport CallbackButton from './CallbackButton.js';\nimport TableComponent from './TableComponent.js';\nimport HomebridingTable from './HomebridingTable.js';\nimport DatePicker from './DatePicker.js';\nimport LoginMenu from './LoginMenu.js';\nimport ParentView from \"./ParentView.js\";\nimport Nav from \"./Nav.js\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"; //// **** INITIALIZATIONS **** ////\n// sets up the uniqid hashing function for use with component id's\n\nvar uniqid = require('uniqid'); // reference values from config.js\n//var students = configValues.students\n//var students = [\"Cottontail, Ralph\"]\n\n\nvar times = configValues.times;\nvar classes = configValues.classes;\nvar periods = configValues.periods; // headers for each type of table\n\nvar hwcHeaders = configValues.homeworkClubHeaders;\nvar detentionHeaders = [];\n\nfunction getFormattedDate(date) {\n  var year = date.getFullYear();\n  var month = (1 + date.getMonth()).toString();\n  month = month.length > 1 ? month : '0' + month;\n  var day = date.getDate().toString();\n  day = day.length > 1 ? day : '0' + day;\n  return month + '/' + day + '/' + year;\n}\n\nclass AdminHomeworkClubView extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      homeworkEntries: [],\n      detentionEntries: [],\n      dueDate: \"\",\n      descriptionText: \"\"\n    };\n  }\n\n  // GET all currentHomeworkClubEntries data to populate table with and store them in state as \"homeworkEntries\"\n  componentDidMount() {\n    fetch(\"/api/adminHomeworkClub\", {\n      method: 'GET'\n    }).then(res => res.json()).then(homeworkEntries => this.initialTablePopulation(homeworkEntries));\n    this.setState({\n      dueDate: getFormattedDate(new Date())\n    });\n  } // a helper function that converts information from the 'currentHomeworkClubEntries' MongoDB collection \n  // into the initial TableComponent entries displayed by the TableR component\n\n\n  initialTablePopulation(listOfEntries) {\n    console.log(listOfEntries); // for each value (aka property) of the MongoDB document object, append a TableComponent to the list of homeworkEntries\n\n    for (let [key, value] of Object.entries(listOfEntries)) {\n      console.log(\" *** value *** \", value); // TODO: use the entries ObjectId value as the reference index so we can delete it from DB later down the road\n\n      this.setState(prevState => ({\n        homeworkEntries: [...prevState.homeworkEntries, /*#__PURE__*/React.createElement(TableComponent, {\n          id: uniqid(),\n          referenceIndex: value._id,\n          studentName: value.student.fname + \" \" + value.student.lname,\n          selectorValue: value.class,\n          description: value.description,\n          dueDate: value.date,\n          callbackRef: event => this.onClickRemoveCard(event),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }\n        })]\n      }));\n    }\n  } // POST a new table entry into the currentHomeworkClubEntries collection in the DB\n\n\n  onClickAddHomeworkCard() {\n    // splice first and last name into two seperate values\n    var splicedName = document.querySelector('#studentName').value.split(', '); // data sent in the body to the express server for saving in MongoDB\n\n    var data = {\n      date: document.querySelector('#date').value,\n      assignedBy: \"Mr.Lowe\",\n      period: document.querySelector('#classPeriod').value,\n      class: document.querySelector('#classSection').value,\n      description: document.querySelector('#descriptionText').value,\n      // for Mongoose to query student ObjectId \n      studentFname: splicedName[1],\n      studentLname: splicedName[0]\n    }; // perform POST API operation to create a new currentHomeworkClub document in DB\n\n    fetch(\"/api/adminHomeworkClub\", {\n      method: 'POST',\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      }),\n      body: JSON.stringify(data)\n    }).then(res => res.json()) // use the responseObject's _id field for the TableComponent's referenceIndex property\n    // we use this value in onClickRemoveCard to filter it out later\n    .then(responseObject => this.additionalTablePopulation(responseObject._id));\n  } // a helper function which adds additional TableR entries using the _id of the latest created document object\n\n\n  additionalTablePopulation(responseId) {\n    var splicedName = document.querySelector('#studentName').value.split(', '); // the TableR component needs a TableComponent appended to it as well since we now have an \n    // additonal homeworkEntry!\n\n    this.setState(prevState => ({\n      homeworkEntries: [...prevState.homeworkEntries, /*#__PURE__*/React.createElement(TableComponent // THIS ID COULD BE A MAJOR PROBLEM FOR DELETING TABLE ENTRIES! \n      , {\n        id: uniqid() // THIS REFERENCE COULD BE A MAJOR PROBLEM!\n        ,\n        referenceIndex: responseId,\n        studentName: splicedName[1] + \" \" + splicedName[0],\n        selectorValue: document.querySelector('#classSection').value,\n        description: document.querySelector('#descriptionText').value,\n        dueDate: document.querySelector('#date').value,\n        callbackRef: event => this.onClickRemoveCard(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }\n      })]\n    }));\n  }\n\n  onClickRemoveCard(event) {\n    // data sent in the body to the express server for saving in MongoDB\n    var data = {\n      referenceId: event.target.id\n    };\n    console.log(event.target.id); // perform fetch\n\n    fetch(\"/api/adminHomeworkClub\", {\n      method: 'DELETE',\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      }),\n      body: JSON.stringify(data)\n    }).then(res => res.json()); // remove the TableComponent from the current list via filter\n\n    this.setState({\n      homeworkEntries: this.state.homeworkEntries.filter(function (entry) {\n        // return all entries which do not share the id of the target entry\n        return entry.props.referenceIndex !== event.target.id;\n      })\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CollectionForm, {\n      collectionLegend: \"Homework Club\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Selector, {\n      configObjectValue: \"studentName\",\n      arrayToMap: this.props.students,\n      labelText: \"Select a student: \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Selector, {\n      configObjectValue: \"classSection\",\n      arrayToMap: classes,\n      labelText: \"Class of assignment: \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Selector, {\n      configObjectValue: \"classPeriod\",\n      arrayToMap: periods,\n      labelText: \"Class Period: \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(DescriptionText, {\n      callbackFunction: () => this.setState({\n        descriptionText: document.querySelector('#descriptionText').value\n      }),\n      passedStateValue: this.state.descriptionText,\n      descriptionPlaceholder: \"Description of assignment\",\n      passedId: \"descriptionText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(DatePicker, {\n      callbackFunction: () => this.setState({\n        dueDate: document.querySelector('#date').value\n      }),\n      passedStateValue: this.state.dueDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(CallbackButton, {\n      callbackFunction: () => this.onClickAddHomeworkCard(),\n      buttonDisplayValue: \"Add Student\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(TableR, {\n      entries: this.state.homeworkEntries,\n      tableHeaders: hwcHeaders,\n      tableLegend: \"Homework Club Entries\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default AdminHomeworkClubView;","map":{"version":3,"sources":["/Users/jaylowe/Projects/Orion/school_tools_frontend_fresh/src/components/AdminHomeworkClubView.js"],"names":["React","configValues","TableR","CollectionForm","DescriptionText","Selector","CallbackButton","TableComponent","HomebridingTable","DatePicker","LoginMenu","ParentView","Nav","BrowserRouter","Router","Switch","Route","Link","uniqid","require","times","classes","periods","hwcHeaders","homeworkClubHeaders","detentionHeaders","getFormattedDate","date","year","getFullYear","month","getMonth","toString","length","day","getDate","AdminHomeworkClubView","Component","state","homeworkEntries","detentionEntries","dueDate","descriptionText","componentDidMount","fetch","method","then","res","json","initialTablePopulation","setState","Date","listOfEntries","console","log","key","value","Object","entries","prevState","_id","student","fname","lname","class","description","event","onClickRemoveCard","onClickAddHomeworkCard","splicedName","document","querySelector","split","data","assignedBy","period","studentFname","studentLname","headers","Headers","body","JSON","stringify","responseObject","additionalTablePopulation","responseId","referenceId","target","id","filter","entry","props","referenceIndex","render","students"],"mappings":"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","sourcesContent":["import React from \"react\"\n\nimport configValues from '../config.js';\n\nimport TableR from './TableR.js';\n\nimport CollectionForm from './CollectionForm.js';\nimport DescriptionText from './DescriptionText.js';\nimport Selector from './Selector.js';\nimport CallbackButton from './CallbackButton.js';\nimport TableComponent from './TableComponent.js';\n\nimport HomebridingTable from './HomebridingTable.js';\nimport DatePicker from './DatePicker.js';\nimport LoginMenu from './LoginMenu.js';\nimport ParentView from \"./ParentView.js\";\nimport Nav from \"./Nav.js\";\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\n//// **** INITIALIZATIONS **** ////\n// sets up the uniqid hashing function for use with component id's\nvar uniqid = require('uniqid');\n\n// reference values from config.js\n//var students = configValues.students\n//var students = [\"Cottontail, Ralph\"]\nvar times = configValues.times\nvar classes = configValues.classes\nvar periods = configValues.periods\n\n// headers for each type of table\nvar hwcHeaders = configValues.homeworkClubHeaders\nvar detentionHeaders = []\n\n\nfunction getFormattedDate(date) {\n    var year = date.getFullYear();\n\n    var month = (1 + date.getMonth()).toString();\n    month = month.length > 1 ? month : '0' + month;\n\n    var day = date.getDate().toString();\n    day = day.length > 1 ? day : '0' + day;\n\n    return month + '/' + day + '/' + year;\n}\n\nclass AdminHomeworkClubView extends React.Component {\n    state = {\n        homeworkEntries: [],\n        detentionEntries: [],\n        dueDate: \"\",\n        descriptionText: \"\",\n    }\n\n    // GET all currentHomeworkClubEntries data to populate table with and store them in state as \"homeworkEntries\"\n    componentDidMount() {\n        fetch(\"/api/adminHomeworkClub\", {\n            method: 'GET'\n        })\n            .then(res => res.json())\n            .then(homeworkEntries => this.initialTablePopulation(homeworkEntries))\n\n        this.setState({\n            dueDate: getFormattedDate(new Date())\n        })\n    }\n\n    // a helper function that converts information from the 'currentHomeworkClubEntries' MongoDB collection \n    // into the initial TableComponent entries displayed by the TableR component\n    initialTablePopulation(listOfEntries) {\n        console.log(listOfEntries)\n        // for each value (aka property) of the MongoDB document object, append a TableComponent to the list of homeworkEntries\n        for (let [key, value] of Object.entries(listOfEntries)) {\n            console.log(\" *** value *** \", value)\n            // TODO: use the entries ObjectId value as the reference index so we can delete it from DB later down the road\n\n            this.setState(prevState => ({\n                homeworkEntries: [...prevState.homeworkEntries,\n                <TableComponent\n                    id={uniqid()}\n                    referenceIndex={value._id}\n                    studentName={value.student.fname + \" \" + value.student.lname}\n                    selectorValue={value.class}\n                    description={value.description}\n                    dueDate={value.date}\n                    callbackRef={(event) => this.onClickRemoveCard(event)}\n                />\n                ]\n            }))\n        }\n    }\n\n    // POST a new table entry into the currentHomeworkClubEntries collection in the DB\n    onClickAddHomeworkCard() {\n        // splice first and last name into two seperate values\n        var splicedName = document.querySelector('#studentName').value.split(', ')\n\n        // data sent in the body to the express server for saving in MongoDB\n        var data = {\n            date: document.querySelector('#date').value,\n            assignedBy: \"Mr.Lowe\",\n            period: document.querySelector('#classPeriod').value,\n            class: document.querySelector('#classSection').value,\n            description: document.querySelector('#descriptionText').value,\n            // for Mongoose to query student ObjectId \n            studentFname: splicedName[1],\n            studentLname: splicedName[0]\n        }\n\n        // perform POST API operation to create a new currentHomeworkClub document in DB\n        fetch(\"/api/adminHomeworkClub\", {\n            method: 'POST',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            body: JSON.stringify(data)\n        })\n            .then(res => res.json())\n            // use the responseObject's _id field for the TableComponent's referenceIndex property\n            // we use this value in onClickRemoveCard to filter it out later\n            .then(responseObject => this.additionalTablePopulation(responseObject._id))\n    }\n\n    // a helper function which adds additional TableR entries using the _id of the latest created document object\n    additionalTablePopulation(responseId) {\n        var splicedName = document.querySelector('#studentName').value.split(', ')\n\n        // the TableR component needs a TableComponent appended to it as well since we now have an \n        // additonal homeworkEntry!\n        this.setState(prevState => ({\n            homeworkEntries: [...prevState.homeworkEntries,\n            <TableComponent\n                // THIS ID COULD BE A MAJOR PROBLEM FOR DELETING TABLE ENTRIES! \n                id={uniqid()}\n                // THIS REFERENCE COULD BE A MAJOR PROBLEM!\n                referenceIndex={responseId}\n                studentName={splicedName[1] + \" \" + splicedName[0]}\n                selectorValue={document.querySelector('#classSection').value}\n                description={document.querySelector('#descriptionText').value}\n                dueDate={document.querySelector('#date').value}\n                callbackRef={(event) => this.onClickRemoveCard(event)}\n            />\n            ]\n        }))\n    }\n\n    onClickRemoveCard(event) {\n        // data sent in the body to the express server for saving in MongoDB\n        var data = {\n            referenceId: event.target.id,\n        }\n\n        console.log(event.target.id)\n\n        // perform fetch\n        fetch(\"/api/adminHomeworkClub\", {\n            method: 'DELETE',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            body: JSON.stringify(data)\n        })\n            .then(res => res.json())\n\n        // remove the TableComponent from the current list via filter\n        this.setState(\n            {\n                homeworkEntries: this.state.homeworkEntries.filter(function (entry) {\n                    // return all entries which do not share the id of the target entry\n                    return entry.props.referenceIndex !== event.target.id\n                })\n            }\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <CollectionForm collectionLegend={\"Homework Club\"}>\n                    <Selector\n                        configObjectValue=\"studentName\"\n                        arrayToMap={this.props.students}\n                        labelText=\"Select a student: \"\n                    />\n                    <Selector\n                        configObjectValue=\"classSection\"\n                        arrayToMap={classes}\n                        labelText=\"Class of assignment: \"\n                    />\n                    <Selector\n                        configObjectValue=\"classPeriod\"\n                        arrayToMap={periods}\n                        labelText=\"Class Period: \"\n                    />\n                    <DescriptionText\n                        callbackFunction={() => this.setState({ descriptionText: document.querySelector('#descriptionText').value })}\n                        passedStateValue={this.state.descriptionText}\n                        descriptionPlaceholder={\"Description of assignment\"}\n                        passedId=\"descriptionText\"\n                    />\n                    <DatePicker\n                        callbackFunction={() => this.setState({ dueDate: document.querySelector('#date').value })}\n                        passedStateValue={this.state.dueDate}\n                    />\n                    <CallbackButton callbackFunction={() => this.onClickAddHomeworkCard()} buttonDisplayValue=\"Add Student\" />\n                </CollectionForm>\n\n                <TableR entries={this.state.homeworkEntries} tableHeaders={hwcHeaders} tableLegend=\"Homework Club Entries\" />\n            </div >\n        )\n    }\n}\n\nexport default AdminHomeworkClubView"]},"metadata":{},"sourceType":"module"}